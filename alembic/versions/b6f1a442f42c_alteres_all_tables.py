"""Alteres all tables

Revision ID: b6f1a442f42c
Revises: a433201fed10
Create Date: 2022-11-22 23:59:46.622732

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b6f1a442f42c'
down_revision = 'a433201fed10'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('educations')
    op.drop_table('works')
    op.create_unique_constraint(None, 'boosts', ['uuid'])
    op.add_column('businesses', sa.Column('company_name', sa.String(), nullable=True))
    op.add_column('businesses', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'businesses', ['uuid'])
    op.drop_column('businesses', 'email')
    op.drop_column('businesses', 'co_name')
    op.create_unique_constraint(None, 'comments', ['uuid'])
    op.add_column('customs', sa.Column('company_name', sa.String(), nullable=True))
    op.add_column('customs', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'customs', ['uuid'])
    op.drop_column('customs', 'email')
    op.drop_column('customs', 'co_name')
    op.add_column('eduinstitutes', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'eduinstitutes', ['uuid'])
    op.drop_column('eduinstitutes', 'email')
    op.create_unique_constraint(None, 'hashtags', ['uuid'])
    op.create_unique_constraint(None, 'lms_log', ['uuid'])
    op.create_unique_constraint(None, 'posts', ['uuid'])
    op.create_unique_constraint(None, 'reports', ['uuid'])
    op.create_unique_constraint(None, 'reset_password_code', ['uuid'])
    op.create_unique_constraint(None, 'settings', ['uuid'])
    op.add_column('students', sa.Column('country', sa.String(), nullable=True))
    op.add_column('students', sa.Column('DOB', sa.Date(), nullable=True))
    op.add_column('students', sa.Column('pronounce', sa.String(), nullable=True))
    op.add_column('students', sa.Column('institute_name', sa.String(), nullable=True))
    op.add_column('students', sa.Column('is_deleted', sa.Boolean(), nullable=True))
    op.create_unique_constraint(None, 'students', ['uuid'])
    op.drop_column('students', 'email')
    op.drop_column('students', 'institude_name')
    op.drop_column('students', 'contact_us')
    op.create_unique_constraint(None, 'users', ['uuid'])
    op.drop_column('users', 'country')
    op.drop_column('users', 'DOB')
    op.drop_column('users', 'pronounce')
    op.create_unique_constraint(None, 'verifications', ['uuid'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'verifications', type_='unique')
    op.add_column('users', sa.Column('pronounce', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('DOB', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.add_column('students', sa.Column('contact_us', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('students', sa.Column('institude_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('students', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'students', type_='unique')
    op.drop_column('students', 'is_deleted')
    op.drop_column('students', 'institute_name')
    op.drop_column('students', 'pronounce')
    op.drop_column('students', 'DOB')
    op.drop_column('students', 'country')
    op.drop_constraint(None, 'settings', type_='unique')
    op.drop_constraint(None, 'reset_password_code', type_='unique')
    op.drop_constraint(None, 'reports', type_='unique')
    op.drop_constraint(None, 'posts', type_='unique')
    op.drop_constraint(None, 'lms_log', type_='unique')
    op.drop_constraint(None, 'hashtags', type_='unique')
    op.add_column('eduinstitutes', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'eduinstitutes', type_='unique')
    op.drop_column('eduinstitutes', 'is_deleted')
    op.add_column('customs', sa.Column('co_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('customs', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'customs', type_='unique')
    op.drop_column('customs', 'is_deleted')
    op.drop_column('customs', 'company_name')
    op.drop_constraint(None, 'comments', type_='unique')
    op.add_column('businesses', sa.Column('co_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('businesses', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'businesses', type_='unique')
    op.drop_column('businesses', 'is_deleted')
    op.drop_column('businesses', 'company_name')
    op.drop_constraint(None, 'boosts', type_='unique')
    op.create_table('works',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('MID', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('job_title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('co_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('YOE', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], name='works_MID_fkey'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='works_user_uuid_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='works_pkey')
    )
    op.create_table('educations',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('MID', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('institute_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('grade', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('specialization', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('YOG', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], name='educations_MID_fkey'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='educations_user_uuid_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='educations_pkey')
    )
    # ### end Alembic commands ###
