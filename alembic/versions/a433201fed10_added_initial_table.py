"""Added initial table

Revision ID: a433201fed10
Revises: 
Create Date: 2022-11-18 00:02:22.927007

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a433201fed10'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lms_log',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ip', sa.Text(), nullable=True),
    sa.Column('module', sa.String(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('api', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('users',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('fullname', sa.String(), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.LargeBinary(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('DOB', sa.Date(), nullable=True),
    sa.Column('pronounce', sa.String(), nullable=True),
    sa.Column('verification_code', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('detail', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('MID'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('boosts',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('boosting_name', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('boosting_uuid', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('booster_name', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('booster_uuid', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('mutual_account', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('businesses',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('business_type', sa.String(), nullable=True),
    sa.Column('profile_photo', sa.String(), nullable=True),
    sa.Column('cover_image', sa.String(), nullable=True),
    sa.Column('tagline', sa.String(), nullable=True),
    sa.Column('co_name', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('industry', sa.String(), nullable=True),
    sa.Column('mobile_no', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('about', sa.String(), nullable=True),
    sa.Column('contact_us', sa.String(), nullable=True),
    sa.Column('social_links', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('customs',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('sub_category', sa.String(), nullable=True),
    sa.Column('tagline', sa.String(), nullable=True),
    sa.Column('about', sa.String(), nullable=True),
    sa.Column('job_title', sa.String(), nullable=True),
    sa.Column('co_name', sa.String(), nullable=True),
    sa.Column('industry', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('YOE', sa.String(), nullable=True),
    sa.Column('mobile_no', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('profile_photo', sa.String(), nullable=True),
    sa.Column('cover_image', sa.String(), nullable=True),
    sa.Column('contact_us', sa.String(), nullable=True),
    sa.Column('social_links', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('educations',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('institute_name', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('grade', sa.String(), nullable=True),
    sa.Column('specialization', sa.String(), nullable=True),
    sa.Column('YOG', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('eduinstitutes',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('tagline', sa.String(), nullable=True),
    sa.Column('profile_photo', sa.String(), nullable=True),
    sa.Column('cover_image', sa.String(), nullable=True),
    sa.Column('institute_name', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('institute_type', sa.String(), nullable=True),
    sa.Column('mobile_no', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('about', sa.String(), nullable=True),
    sa.Column('contact_us', sa.String(), nullable=True),
    sa.Column('social_links', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('posts',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('caption', sa.String(), nullable=True),
    sa.Column('media_link', sa.String(), nullable=True),
    sa.Column('media_type', sa.String(), nullable=True),
    sa.Column('share_count', sa.Integer(), nullable=True),
    sa.Column('send_count', sa.Integer(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('like_count', sa.Integer(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('not_interested', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('reports',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('news_feed_report', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('certificate_report', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('ebattle_report', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('profile_report', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('comment_report', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('reported_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('reported_type', sa.String(), nullable=True),
    sa.Column('reported_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['reported_uuid'], ['users.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('reset_password_code',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('verification_code', sa.JSON(), nullable=True),
    sa.Column('consumed', sa.Boolean(), nullable=True),
    sa.Column('expired', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('settings',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('public_account', sa.Boolean(), nullable=True),
    sa.Column('protect_account', sa.Boolean(), nullable=True),
    sa.Column('delete_account', sa.Boolean(), nullable=True),
    sa.Column('blocked_account', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('logout_activity', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('students',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('tagline', sa.String(), nullable=True),
    sa.Column('about', sa.String(), nullable=True),
    sa.Column('institude_name', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('grade', sa.String(), nullable=True),
    sa.Column('specialization', sa.String(), nullable=True),
    sa.Column('YOG', sa.String(), nullable=True),
    sa.Column('mobile_no', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('profile_photo', sa.String(), nullable=True),
    sa.Column('cover_image', sa.String(), nullable=True),
    sa.Column('contact_us', sa.String(), nullable=True),
    sa.Column('social_links', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('verifications',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('document_url', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('works',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('job_title', sa.String(), nullable=True),
    sa.Column('co_name', sa.String(), nullable=True),
    sa.Column('industry', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('YOE', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('comments',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('post_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('certificate_id', sa.Boolean(), nullable=True),
    sa.Column('comment_details', sa.String(), nullable=True),
    sa.Column('delete_comment', sa.Boolean(), nullable=True),
    sa.Column('report_comment', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['post_uuid'], ['posts.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('hashtags',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('post_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('caption', sa.String(), nullable=True),
    sa.Column('post_hastags', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('trending_hastag', sa.Boolean(), nullable=True),
    sa.Column('easter_eggs', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['post_uuid'], ['posts.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('hashtags')
    op.drop_table('comments')
    op.drop_table('works')
    op.drop_table('verifications')
    op.drop_table('students')
    op.drop_table('settings')
    op.drop_table('reset_password_code')
    op.drop_table('reports')
    op.drop_table('posts')
    op.drop_table('eduinstitutes')
    op.drop_table('educations')
    op.drop_table('customs')
    op.drop_table('businesses')
    op.drop_table('boosts')
    op.drop_table('users')
    op.drop_table('lms_log')
    # ### end Alembic commands ###
