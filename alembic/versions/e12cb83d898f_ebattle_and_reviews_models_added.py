"""EBattle and Reviews  models added

Revision ID: e12cb83d898f
Revises: 2b145ee8b240
Create Date: 2022-12-29 00:35:48.697567

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e12cb83d898f'
down_revision = '2b145ee8b240'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('boost_requests',
    sa.Column('sender_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('receiver_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['receiver_uuid'], ['users.uuid'], ),
    sa.ForeignKeyConstraint(['sender_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('sender_uuid', 'receiver_uuid')
    )
    op.create_table('e_battles',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('reward', sa.String(), nullable=True),
    sa.Column('from_date', sa.Date(), nullable=True),
    sa.Column('to_date', sa.Date(), nullable=True),
    sa.Column('duration', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('result_date', sa.Date(), nullable=True),
    sa.Column('tags', sa.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
    sa.Column('cover_image_url', sa.String(), nullable=True),
    sa.Column('winner', sa.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=True),
    sa.Column('like_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('reviews',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('review', sa.String(), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('reply', sa.String(), nullable=True),
    sa.Column('replied_at', sa.DateTime(), nullable=True),
    sa.Column('is_reported', sa.Boolean(), nullable=True),
    sa.Column('reported_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('join_e_battles',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MID', sa.String(), nullable=True),
    sa.Column('e_battle_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('post_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('caption', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['MID'], ['users.MID'], ),
    sa.ForeignKeyConstraint(['e_battle_uuid'], ['e_battles.uuid'], ),
    sa.ForeignKeyConstraint(['post_uuid'], ['posts.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('likes',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('post_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('certificate_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('is_liked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_uuid'], ['certificates.uuid'], ),
    sa.ForeignKeyConstraint(['post_uuid'], ['posts.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], ),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.drop_table('post_likes_dislikes')
    op.drop_table('certificate_likes')
    op.create_unique_constraint(None, 'dont_recommends', ['uuid'])
    op.add_column('hashtags', sa.Column('e_battle_uuid', postgresql.UUID(as_uuid=True), nullable=True))
    op.create_foreign_key(None, 'hashtags', 'e_battles', ['e_battle_uuid'], ['uuid'])
    op.add_column('users', sa.Column('dial_code', sa.String(), nullable=True))
    op.add_column('users', sa.Column('mobile', sa.String(), nullable=True))
    op.create_unique_constraint(None, 'users', ['mobile'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'mobile')
    op.drop_column('users', 'dial_code')
    op.drop_constraint(None, 'hashtags', type_='foreignkey')
    op.drop_column('hashtags', 'e_battle_uuid')
    op.drop_constraint(None, 'dont_recommends', type_='unique')
    op.create_table('certificate_likes',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('certificate_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_liked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['certificate_uuid'], ['posts.uuid'], name='certificate_likes_certificate_uuid_fkey'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='certificate_likes_user_uuid_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='certificate_likes_pkey'),
    sa.UniqueConstraint('uuid', name='certificate_likes_uuid_key')
    )
    op.create_table('post_likes_dislikes',
    sa.Column('uuid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('post_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_uuid', postgresql.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_liked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_uuid'], ['posts.uuid'], name='post_likes_dislikes_post_uuid_fkey'),
    sa.ForeignKeyConstraint(['user_uuid'], ['users.uuid'], name='post_likes_dislikes_user_uuid_fkey'),
    sa.PrimaryKeyConstraint('uuid', name='post_likes_dislikes_pkey'),
    sa.UniqueConstraint('uuid', name='post_likes_dislikes_uuid_key')
    )
    op.drop_table('likes')
    op.drop_table('join_e_battles')
    op.drop_table('reviews')
    op.drop_table('e_battles')
    op.drop_table('boost_requests')
    # ### end Alembic commands ###
